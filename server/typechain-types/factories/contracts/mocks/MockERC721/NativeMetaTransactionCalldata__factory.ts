/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  NativeMetaTransactionCalldata,
  NativeMetaTransactionCalldataInterface,
} from "../../../../contracts/mocks/MockERC721/NativeMetaTransactionCalldata";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name_",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "userAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address payable",
        name: "relayerAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "functionSignature",
        type: "bytes",
      },
    ],
    name: "MetaTransactionExecuted",
    type: "event",
  },
  {
    inputs: [],
    name: "ERC712_VERSION",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "userAddress",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "functionSignature",
        type: "bytes",
      },
      {
        internalType: "bytes32",
        name: "sigR",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "sigS",
        type: "bytes32",
      },
      {
        internalType: "uint8",
        name: "sigV",
        type: "uint8",
      },
    ],
    name: "executeMetaTransaction",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "userAddress",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "functionSignature",
        type: "bytes",
      },
      {
        internalType: "bytes32",
        name: "sigR",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "sigS",
        type: "bytes32",
      },
      {
        internalType: "uint8",
        name: "sigV",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "callData",
        type: "bytes",
      },
    ],
    name: "executeMetaTransaction",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getChainId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getDomainSeperator",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getNonce",
    outputs: [
      {
        internalType: "uint256",
        name: "nonce",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040526000805460ff191690553480156200001b57600080fd5b5060405162000e8a38038062000e8a8339810160408190526200003e916200017d565b620000498162000050565b5062000259565b60005460ff1615620000995760405162461bcd60e51b815260206004820152600e60248201526d185b1c9958591e481a5b9a5d195960921b604482015260640160405180910390fd5b620000a481620000b4565b506000805460ff19166001179055565b6040518060800160405280604f815260200162000e3b604f913980516020918201208251838301206040805180820190915260018152603160f81b930192909252907fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6304660408051602081019690965285019390935260608401919091526001600160a01b0316608083015260a082015260c00160408051601f19818403018152919052805160209091012060015550565b634e487b7160e01b600052604160045260246000fd5b600060208083850312156200019157600080fd5b82516001600160401b0380821115620001a957600080fd5b818501915085601f830112620001be57600080fd5b815181811115620001d357620001d362000167565b604051601f8201601f19908116603f01168101908382118183101715620001fe57620001fe62000167565b8160405282815288868487010111156200021757600080fd5b600093505b828410156200023b57848401860151818501870152928501926200021c565b828411156200024d5760008684830101525b98975050505050505050565b610bd280620002696000396000f3fe6080604052600436106100655760003560e01c80632d0335ab116100435780632d0335ab146100fb5780633408e4701461013e578063a49b6b521461015157600080fd5b80630c53c51c1461006a5780630f7e59701461009357806320379ee5146100dc575b600080fd5b61007d610078366004610884565b610164565b60405161008a9190610970565b60405180910390f35b34801561009f57600080fd5b5061007d6040518060400160405280600181526020017f310000000000000000000000000000000000000000000000000000000000000081525081565b3480156100e857600080fd5b506001545b60405190815260200161008a565b34801561010757600080fd5b506100ed610116366004610983565b73ffffffffffffffffffffffffffffffffffffffff1660009081526002602052604090205490565b34801561014a57600080fd5b50466100ed565b61007d61015f36600461099e565b61018d565b606061018386868686866040518060200160405280600081525061018d565b9695505050505050565b604080516060818101835273ffffffffffffffffffffffffffffffffffffffff8916600081815260026020908152908590205484528301529181018790526101d88882888888610339565b610269576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f5369676e657220616e64207369676e617475726520646f206e6f74206d61746360448201527f680000000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff881660009081526002602052604090205461029a906001610a35565b73ffffffffffffffffffffffffffffffffffffffff89166000908152600260205260409081902091909155517f5845892132946850460bff5a0083f71031bc5bf9aadcd40f1de79423eac9b10b906102f7908a9033908b90610a74565b60405180910390a161032d3088858b60405160200161031893929190610ab6565b60405160208183030381529060405234610482565b98975050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff86166103de576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f4e61746976654d6574615472616e73616374696f6e3a20494e56414c49445f5360448201527f49474e45520000000000000000000000000000000000000000000000000000006064820152608401610260565b60016103f16103ec876104b2565b61053c565b6040805160008152602081018083529290925260ff851690820152606081018690526080810185905260a0016020604051602081039080840390855afa15801561043f573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614905095945050505050565b60606104a8848484604051806060016040528060298152602001610b7460299139610587565b90505b9392505050565b6000604051806080016040528060438152602001610b31604391398051602091820120835184830151604080870151805190860120905161051f9501938452602084019290925273ffffffffffffffffffffffffffffffffffffffff166040830152606082015260800190565b604051602081830303815290604052805190602001209050919050565b600061054760015490565b6040517f1901000000000000000000000000000000000000000000000000000000000000602082015260228101919091526042810183905260620161051f565b606082471015610619576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610260565b73ffffffffffffffffffffffffffffffffffffffff85163b610697576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610260565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516106c09190610b14565b60006040518083038185875af1925050503d80600081146106fd576040519150601f19603f3d011682016040523d82523d6000602084013e610702565b606091505b509150915061071282828661071d565b979650505050505050565b6060831561072c5750816104ab565b82511561073c5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102609190610970565b803573ffffffffffffffffffffffffffffffffffffffff8116811461079457600080fd5b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f8301126107d957600080fd5b813567ffffffffffffffff808211156107f4576107f4610799565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190828211818310171561083a5761083a610799565b8160405283815286602085880101111561085357600080fd5b836020870160208301376000602085830101528094505050505092915050565b803560ff8116811461079457600080fd5b600080600080600060a0868803121561089c57600080fd5b6108a586610770565b9450602086013567ffffffffffffffff8111156108c157600080fd5b6108cd888289016107c8565b94505060408601359250606086013591506108ea60808701610873565b90509295509295909350565b60005b838110156109115781810151838201526020016108f9565b83811115610920576000848401525b50505050565b6000815180845261093e8160208601602086016108f6565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006104ab6020830184610926565b60006020828403121561099557600080fd5b6104ab82610770565b60008060008060008060c087890312156109b757600080fd5b6109c087610770565b9550602087013567ffffffffffffffff808211156109dd57600080fd5b6109e98a838b016107c8565b96506040890135955060608901359450610a0560808a01610873565b935060a0890135915080821115610a1b57600080fd5b50610a2889828a016107c8565b9150509295509295509295565b60008219821115610a6f577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b500190565b600073ffffffffffffffffffffffffffffffffffffffff808616835280851660208401525060606040830152610aad6060830184610926565b95945050505050565b60008451610ac88184602089016108f6565b845190830190610adc8183602089016108f6565b60609490941b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000169301928352505060140192915050565b60008251610b268184602087016108f6565b919091019291505056fe4d6574615472616e73616374696f6e2875696e74323536206e6f6e63652c616464726573732066726f6d2c62797465732066756e6374696f6e5369676e617475726529416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564a264697066735822122058a80b6eeeb1e234802546f427b34c75a0e2a6c4fc476674844e95db68894b6764736f6c634300080c0033454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c6164647265737320766572696679696e67436f6e74726163742c627974657333322073616c7429";

type NativeMetaTransactionCalldataConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: NativeMetaTransactionCalldataConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class NativeMetaTransactionCalldata__factory extends ContractFactory {
  constructor(...args: NativeMetaTransactionCalldataConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    name_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<NativeMetaTransactionCalldata> {
    return super.deploy(
      name_,
      overrides || {}
    ) as Promise<NativeMetaTransactionCalldata>;
  }
  override getDeployTransaction(
    name_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(name_, overrides || {});
  }
  override attach(address: string): NativeMetaTransactionCalldata {
    return super.attach(address) as NativeMetaTransactionCalldata;
  }
  override connect(signer: Signer): NativeMetaTransactionCalldata__factory {
    return super.connect(signer) as NativeMetaTransactionCalldata__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): NativeMetaTransactionCalldataInterface {
    return new utils.Interface(_abi) as NativeMetaTransactionCalldataInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): NativeMetaTransactionCalldata {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as NativeMetaTransactionCalldata;
  }
}
