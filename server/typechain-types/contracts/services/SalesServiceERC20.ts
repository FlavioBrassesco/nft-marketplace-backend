/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface SalesServiceERC20Interface extends utils.Interface {
  functions: {
    "BASE_CURRENCY()": FunctionFragment;
    "WETH()": FunctionFragment;
    "addApprovedToken(address)": FunctionFragment;
    "addAuthorizedMarketplace(address)": FunctionFragment;
    "approvePayment(address,uint256,uint256)": FunctionFragment;
    "approvePaymentERC20(address,address,address,uint256,uint256,uint256)": FunctionFragment;
    "getAmountsOutMin(uint256,address[])": FunctionFragment;
    "getApprovedTokens()": FunctionFragment;
    "getAuthorizedMarketplaces()": FunctionFragment;
    "getPendingRevenue(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "removeApprovedToken(address)": FunctionFragment;
    "removeAuthorizedMarketplace(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "retrievePendingRevenue()": FunctionFragment;
    "setTreasuryAddress(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unlockPendingRevenue(address,uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BASE_CURRENCY"
      | "WETH"
      | "addApprovedToken"
      | "addAuthorizedMarketplace"
      | "approvePayment"
      | "approvePaymentERC20"
      | "getAmountsOutMin"
      | "getApprovedTokens"
      | "getAuthorizedMarketplaces"
      | "getPendingRevenue"
      | "owner"
      | "removeApprovedToken"
      | "removeAuthorizedMarketplace"
      | "renounceOwnership"
      | "retrievePendingRevenue"
      | "setTreasuryAddress"
      | "transferOwnership"
      | "unlockPendingRevenue"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BASE_CURRENCY",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addApprovedToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addAuthorizedMarketplace",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "approvePayment",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "approvePaymentERC20",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountsOutMin",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getApprovedTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAuthorizedMarketplaces",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingRevenue",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeApprovedToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAuthorizedMarketplace",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "retrievePendingRevenue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasuryAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockPendingRevenue",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "BASE_CURRENCY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addApprovedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAuthorizedMarketplace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvePayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvePaymentERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountsOutMin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApprovedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuthorizedMarketplaces",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingRevenue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeApprovedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAuthorizedMarketplace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retrievePendingRevenue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasuryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockPendingRevenue",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface SalesServiceERC20 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SalesServiceERC20Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BASE_CURRENCY(overrides?: CallOverrides): Promise<[string]>;

    WETH(overrides?: CallOverrides): Promise<[string]>;

    addApprovedToken(
      tokenAddress_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addAuthorizedMarketplace(
      marketplaceAddress_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approvePayment(
      to_: PromiseOrValue<string>,
      price_: PromiseOrValue<BigNumberish>,
      feePercentage_: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approvePaymentERC20(
      from_: PromiseOrValue<string>,
      to_: PromiseOrValue<string>,
      tokenAddress_: PromiseOrValue<string>,
      amountIn_: PromiseOrValue<BigNumberish>,
      price_: PromiseOrValue<BigNumberish>,
      feePercentage_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAmountsOutMin(
      amountIn_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountsOutMin: BigNumber }>;

    getApprovedTokens(overrides?: CallOverrides): Promise<[string[]]>;

    getAuthorizedMarketplaces(overrides?: CallOverrides): Promise<[string[]]>;

    getPendingRevenue(
      user_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { revenue: BigNumber }>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeApprovedToken(
      tokenAddress_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeAuthorizedMarketplace(
      marketplaceAddress_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    retrievePendingRevenue(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTreasuryAddress(
      treasuryAddress_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unlockPendingRevenue(
      to_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      percentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  BASE_CURRENCY(overrides?: CallOverrides): Promise<string>;

  WETH(overrides?: CallOverrides): Promise<string>;

  addApprovedToken(
    tokenAddress_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addAuthorizedMarketplace(
    marketplaceAddress_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approvePayment(
    to_: PromiseOrValue<string>,
    price_: PromiseOrValue<BigNumberish>,
    feePercentage_: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approvePaymentERC20(
    from_: PromiseOrValue<string>,
    to_: PromiseOrValue<string>,
    tokenAddress_: PromiseOrValue<string>,
    amountIn_: PromiseOrValue<BigNumberish>,
    price_: PromiseOrValue<BigNumberish>,
    feePercentage_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAmountsOutMin(
    amountIn_: PromiseOrValue<BigNumberish>,
    path_: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getApprovedTokens(overrides?: CallOverrides): Promise<string[]>;

  getAuthorizedMarketplaces(overrides?: CallOverrides): Promise<string[]>;

  getPendingRevenue(
    user_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeApprovedToken(
    tokenAddress_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeAuthorizedMarketplace(
    marketplaceAddress_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  retrievePendingRevenue(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTreasuryAddress(
    treasuryAddress_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unlockPendingRevenue(
    to_: PromiseOrValue<string>,
    amount_: PromiseOrValue<BigNumberish>,
    percentage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BASE_CURRENCY(overrides?: CallOverrides): Promise<string>;

    WETH(overrides?: CallOverrides): Promise<string>;

    addApprovedToken(
      tokenAddress_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addAuthorizedMarketplace(
      marketplaceAddress_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    approvePayment(
      to_: PromiseOrValue<string>,
      price_: PromiseOrValue<BigNumberish>,
      feePercentage_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approvePaymentERC20(
      from_: PromiseOrValue<string>,
      to_: PromiseOrValue<string>,
      tokenAddress_: PromiseOrValue<string>,
      amountIn_: PromiseOrValue<BigNumberish>,
      price_: PromiseOrValue<BigNumberish>,
      feePercentage_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountsOutMin(
      amountIn_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getApprovedTokens(overrides?: CallOverrides): Promise<string[]>;

    getAuthorizedMarketplaces(overrides?: CallOverrides): Promise<string[]>;

    getPendingRevenue(
      user_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeApprovedToken(
      tokenAddress_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeAuthorizedMarketplace(
      marketplaceAddress_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    retrievePendingRevenue(overrides?: CallOverrides): Promise<void>;

    setTreasuryAddress(
      treasuryAddress_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unlockPendingRevenue(
      to_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      percentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    BASE_CURRENCY(overrides?: CallOverrides): Promise<BigNumber>;

    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    addApprovedToken(
      tokenAddress_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addAuthorizedMarketplace(
      marketplaceAddress_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approvePayment(
      to_: PromiseOrValue<string>,
      price_: PromiseOrValue<BigNumberish>,
      feePercentage_: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approvePaymentERC20(
      from_: PromiseOrValue<string>,
      to_: PromiseOrValue<string>,
      tokenAddress_: PromiseOrValue<string>,
      amountIn_: PromiseOrValue<BigNumberish>,
      price_: PromiseOrValue<BigNumberish>,
      feePercentage_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAmountsOutMin(
      amountIn_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getApprovedTokens(overrides?: CallOverrides): Promise<BigNumber>;

    getAuthorizedMarketplaces(overrides?: CallOverrides): Promise<BigNumber>;

    getPendingRevenue(
      user_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeApprovedToken(
      tokenAddress_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeAuthorizedMarketplace(
      marketplaceAddress_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    retrievePendingRevenue(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTreasuryAddress(
      treasuryAddress_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unlockPendingRevenue(
      to_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      percentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BASE_CURRENCY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addApprovedToken(
      tokenAddress_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addAuthorizedMarketplace(
      marketplaceAddress_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approvePayment(
      to_: PromiseOrValue<string>,
      price_: PromiseOrValue<BigNumberish>,
      feePercentage_: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approvePaymentERC20(
      from_: PromiseOrValue<string>,
      to_: PromiseOrValue<string>,
      tokenAddress_: PromiseOrValue<string>,
      amountIn_: PromiseOrValue<BigNumberish>,
      price_: PromiseOrValue<BigNumberish>,
      feePercentage_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAmountsOutMin(
      amountIn_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getApprovedTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAuthorizedMarketplaces(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPendingRevenue(
      user_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeApprovedToken(
      tokenAddress_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeAuthorizedMarketplace(
      marketplaceAddress_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    retrievePendingRevenue(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTreasuryAddress(
      treasuryAddress_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unlockPendingRevenue(
      to_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      percentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
